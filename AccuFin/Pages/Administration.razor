@page "/administration"
@page "/administration/{Id:guid}"

<EditModelComponent ModelType="AdministrationModel"
                    OnGetModel="GetModelAsync"
                    OnDeleteModel="DeleteModelAsync"
                    OnGetObjectToDeleteDescription="@((model)=> model.Name)"
                    NavigateToAfterDelete="/administrations"
                    NavigateToAfterAddOrEdit="/administrations"
                    OnSaveValidModel="OnSave"
                    OnlyOnce="true">
    <MudTextField Label="Naam"
    @bind-Value="context.Name" For="@(() => context.Name)" />
    <MudTextField Label="Kvknummer" Class="mt-3"
    @bind-Value="context.AdministrationRegistryCode" For="@(() =>context.AdministrationRegistryCode)" />
    <MudTextField Label="Telefoon" Class="mt-3"
    @bind-Value="context.TelephoneNumber" For="@(() =>context.TelephoneNumber)" />
    <MudTextField Label="Email" Class="mt-3"
    @bind-Value="context.EmailAdress" For="@(() =>context.EmailAdress)" />

    <MudDataGrid T="UserAdministrationLinkModel" Items="context.Users" Class="mt-3">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Gebruikers</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="AddEmailAdress" Placeholder="Emailadres"
                          Margin="Margin.Dense"
                          IconSize="Size.Medium" />
            <MudButton Class="pa-2 mt-auto" Size="Size.Medium" OnClick="async () => await AddUserByEmail(context)">Toevoegen</MudButton>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Naam" Sortable="true" />
            <PropertyColumn Property="x => x.Email" Title="Email" Sortable="true" />
            <TemplateColumn Resizable="false" Sortable="false">
                <CellTemplate Context="cellContext">
                    <MudSelect T="AdministrationRole" SelectAllText="Alles selecteren" 
                        MultiSelection="true" 
                        @bind-SelectedValues="cellContext.Item.Roles"
                        >
                        @foreach (var role in Roles)
                        {
                            <MudSelectItem T="AdministrationRole" Value="role">@role.Name</MudSelectItem>
                        }
                    </MudSelect>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Resizable="false" CellStyle="width:64px;" Sortable="false">
                <CellTemplate Context="cellContext">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => context.Users.Remove(cellContext.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>


</EditModelComponent>

@code {
    [Inject]
    public AdministrationClient AdministrationClient { get; set; }

    [Inject]
    public ISnackbar Snackbar { get; set; }

    [Inject]
    public IDialogService DialogService { get; set; }
    [Inject]
    public UserClient UserClient { get; set; }
    [Parameter]
    public Guid Id { get; set; }

    public string AddEmailAdress { get; set; }

    public List<AdministrationRole> Roles { get; set; } 

    public MudForm Form { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Roles = AdministrationRole.GetRoles();
    }

    public async Task<InitializeEditFormResult<AdministrationModel>> GetModelAsync()
    {
        if (Id == Guid.Empty)
        {
            return new InitializeEditFormResult<AdministrationModel>(new AdministrationModel(), null);
        }
        else
        {
            var response = await AdministrationClient.GetAdministrationByIdAsync(Id);
            if (response.Success)
            {
                return new InitializeEditFormResult<AdministrationModel>(response.Data, response);
            }
            else
            {
                return new InitializeEditFormResult<AdministrationModel>(null, response);
            }
        }
    }

    private async Task<Response<bool>> DeleteModelAsync(AdministrationModel model)
    {
        return await AdministrationClient.DeleteAdministrationAsync(model.Id);
    }

    private async Task<Response<AdministrationModel, List<ValidationError>>> OnSave(AdministrationModel model)
    {
        if (Id == Guid.Empty)
        {
            return await AdministrationClient.AddAdministrationAsync(model);
        }
        else
        {
            return await AdministrationClient.UpdateAdministrationAsync(model);
        }
    }

    public async Task AddUserByEmail(AdministrationModel model)
    {
        if (!string.IsNullOrWhiteSpace(AddEmailAdress))
        {
            var response = await UserClient.GetUserByEmailadressAsync(AddEmailAdress);
            if (!response.Success)
            {
                Snackbar.Add("Fout bij ophalen gegevens", Severity.Error);
            }

            if (response.Data == null)
            {
                var parameters = new DialogParameters();
                parameters.Add("ContentText", "Geen gebruiker met emailadres gevonden. Wilt u deze toevoegen?");
                parameters.Add("CancelText", "Sluiten");
                parameters.Add("ConfirmButton", false);

                var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
                var dialog = await DialogService.ShowAsync<FinDialog>("Niet gevonden", parameters, options);
            }
            else
            {
                model.Users.Add(new UserAdministrationLinkModel() { Email = response.Data.Email, Name = response.Data.Name, UserId =response.Data.Id });
            }

        }
    }
}
