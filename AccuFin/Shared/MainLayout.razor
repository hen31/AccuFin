@using Blazored.LocalStorage;
@inherits LayoutComponentBase

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudText Typo="Typo.h6">@(context.User.Claims.FirstOrDefault(b => b.Type == ClaimTypes.Email)?.Value)</MudText>
                </Authorized>
            </AuthorizeView>
            <img src="images/header.png" style="max-height: 100%;" />
        </MudAppBar>
        <MudDrawer ClipMode="DrawerClipMode.Docked" @bind-Open="_drawerOpen" Variant="@DrawerVariant.Persistent" Elevation="2" Color="Color.Primary">
           

            <AuthorizeView Roles="Admin">
                <Authorized>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Contacts" Href="/administrations" IconColor="Color.Inherit">Administraties</MudNavLink>
                </Authorized>
            </AuthorizeView>

            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ManageAccounts" Href="/account" IconColor="Color.Inherit">Account</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Logout" OnClick="LogOff" IconColor="Color.Inherit">Uitloggen</MudNavLink>
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>


    <MudThemeProvider Theme="@DefaultTheme" />
    <MudDialogProvider />
    <MudSnackbarProvider />

    @code {
    MudTheme DefaultTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = new MudBlazor.Utilities.MudColor("#4D65F1"),
                AppbarBackground = new MudBlazor.Utilities.MudColor("#4D65F1"),
            }
        };
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    [Inject]
    public AdministrationClient AdministrationClient{ get; set; }

    [Inject]
    private ClientAuthentication ClientAuthentication { get; set; }
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    public async Task LogOff()
    {
        await ClientAuthentication.SetToken(null);
        await ClientAuthentication.SetRefreshTokenAsync(null);
        NavigationManager.NavigateTo("/login");
    }
}