@typeparam ModelType where ModelType : IModel<ModelType>, new()

<MudForm Model="@Model"
         Validation="@(Model?.ValidateValue())"
         ValidationDelay="0"
         ReadOnly="ReadOnly"
         @ref="@Form">
    <MudCard>
        <MudCardContent>
            @if (Model != null)
            {
                @ChildContent.Invoke(Model)
            }
            else
            {
                @ChildContent.Invoke(new ModelType())
            }
            @if (_busy)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            }
            @if (SaveResponse != null)
            {
                @if (SaveResponse.Success)
                {
                    <MudAlert Severity="Severity.Success">Opslaan gelukt</MudAlert>
                }
                else if (SaveResponse.ErrorData != null && SaveResponse.ErrorData.Count > 0)
                {
                    foreach (var error in SaveResponse.ErrorData)
                    {
                        <MudAlert Severity="Severity.Error">@error</MudAlert>
                    }
                }
                else
                {
                    <MudAlert Severity="Severity.Error">Opslaan mislukt</MudAlert>
                }
            }
            @if (GetModelResponse != null && !GetModelResponse.Success)
            {
                <MudAlert Severity="Severity.Error">Ophalen mislukt <MudLink OnClick="LoadModelAsync">Opnieuw proberen</MudLink> </MudAlert>
            }
        </MudCardContent>
    </MudCard>
    <MudCardActions>
        @if (OnDeleteModel != null && GetModelResponse != null)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Error"
                   Disabled="@(ReadOnly)"
                   OnClick="OnDelete">@DeleteText</MudButton>
        }
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Disabled="@(ReadOnly || (OnlyOnce && SaveResponse!=null && SaveResponse.Success))" OnClick="OnSave">@SaveText</MudButton>
    </MudCardActions>
</MudForm>

@code {
    public ModelType Model { get; set; }

    [Parameter]
    public Func<ModelType, Task<Response<ModelType, List<ValidationError>>>> OnSaveValidModel { get; set; }

    [Parameter]
    public Func<ModelType, Task<Response<ModelType>>> OnDeleteModel { get; set; }


    public MudForm Form { get; set; }
    [Parameter]
    public RenderFragment<ModelType> ChildContent { get; set; }

    [Parameter]
    public string SaveText { get; set; } = "Opslaan";
    [Parameter]
    public string DeleteText { get; set; } = "Verwijderen";
    [Parameter]
    public bool OnlyOnce { get; set; }

    [Parameter]
    public Func<Task<InitializeEditFormResult<ModelType>>> OnGetModel { get; set; }
    [Parameter]
    public Response<ModelType> GetModelResponse { get; set; }

    private Response<ModelType, List<ValidationError>> SaveResponse { get; set; }


    private Response<ModelType> DeleteResponse { get; set; }

    private bool _busy;
    private bool _ready = false;
    private bool ReadOnly => _busy || !_ready;

    protected override async Task OnInitializedAsync()
    {
        await LoadModelAsync();
    }

    public async Task LoadModelAsync()
    {
        _busy = true;
        var modelResult = await OnGetModel?.Invoke();
        Model = modelResult.Model;
        GetModelResponse = modelResult.Response;
        if (Model != null)
        {
            _ready = true;
        }
        _busy = false;
    }

    private async Task OnSave()
    {
        if (_busy || (OnlyOnce && SaveResponse != null && SaveResponse.Success))
        {
            return;
        }
        _busy = true;
        SaveResponse = null;
        await Form.Validate();
        if (Form.IsValid)
        {
            SaveResponse = await OnSaveValidModel?.Invoke(Model);
            if (SaveResponse.Success)
            {
                Model = SaveResponse.Data;
                _ready = true;
            }
        }
        _busy = false;
        StateHasChanged();


    }
    private async Task OnDelete()
    {
        if (_busy)
        {
            return;
        }
        _busy = true;
        //Ask question with dialog sure delete?

        DeleteResponse = null;
        DeleteResponse = await OnDeleteModel?.Invoke(Model);//Create real delete
        if (DeleteResponse.Success)
        {
            Model = DeleteResponse.Data;
            _ready = true;
        }

        _busy = false;
        StateHasChanged();


    }


}
