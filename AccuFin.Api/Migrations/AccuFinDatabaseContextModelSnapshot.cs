// <auto-generated />
using System;
using AccuFin.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccuFin.Api.Migrations
{
    [DbContext(typeof(AccuFinDatabaseContext))]
    partial class AccuFinDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.4.23259.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccuFin.Data.Entities.Administration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdministrationRegistryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasImage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Administrations");
                });

            modelBuilder.Entity("AccuFin.Data.Entities.AuthorizedUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuthorizedUsers");
                });

            modelBuilder.Entity("AccuFin.Data.Entities.BankIntegration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AcceptedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AdministrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalLinkId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InitializedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("UserId");

                    b.ToTable("BankIntegrations");
                });

            modelBuilder.Entity("AccuFin.Data.Entities.LinkBankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AdministrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastSync")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Sync")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdministrationId");

                    b.ToTable("LinkBankAccounts");
                });

            modelBuilder.Entity("AccuFin.Data.Entities.UserAdministrationLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdministrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdministrationId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorizedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Roles")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("AdministrationId1");

                    b.HasIndex("AuthorizedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAdministrationLink");
                });

            modelBuilder.Entity("AccuFin.Data.Entities.BankIntegration", b =>
                {
                    b.HasOne("AccuFin.Data.Entities.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccuFin.Data.Entities.AuthorizedUser", "AuthorizedUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administration");

                    b.Navigation("AuthorizedUser");
                });

            modelBuilder.Entity("AccuFin.Data.Entities.LinkBankAccount", b =>
                {
                    b.HasOne("AccuFin.Data.Entities.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administration");
                });

            modelBuilder.Entity("AccuFin.Data.Entities.UserAdministrationLink", b =>
                {
                    b.HasOne("AccuFin.Data.Entities.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccuFin.Data.Entities.Administration", null)
                        .WithMany()
                        .HasForeignKey("AdministrationId1");

                    b.HasOne("AccuFin.Data.Entities.AuthorizedUser", null)
                        .WithMany()
                        .HasForeignKey("AuthorizedUserId");

                    b.HasOne("AccuFin.Data.Entities.AuthorizedUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administration");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
